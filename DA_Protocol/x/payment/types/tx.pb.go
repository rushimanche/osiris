// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payment/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgWirePayForData describes the format of data that is sent over the wire
// for each PayForData
type MsgWirePayForData struct {
	Signer                 string                    `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	MessageNamespaceId     []byte                    `protobuf:"bytes,2,opt,name=message_namespace_id,json=messageNamespaceId,proto3" json:"message_namespace_id,omitempty"`
	MessageSize            uint64                    `protobuf:"varint,3,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
	Message                []byte                    `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	MessageShareCommitment []ShareCommitAndSignature `protobuf:"bytes,6,rep,name=message_share_commitment,json=messageShareCommitment,proto3" json:"message_share_commitment"`
}

func (m *MsgWirePayForData) Reset()         { *m = MsgWirePayForData{} }
func (m *MsgWirePayForData) String() string { return proto.CompactTextString(m) }
func (*MsgWirePayForData) ProtoMessage()    {}
func (*MsgWirePayForData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{0}
}
func (m *MsgWirePayForData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWirePayForData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWirePayForData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWirePayForData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWirePayForData.Merge(m, src)
}
func (m *MsgWirePayForData) XXX_Size() int {
	return m.Size()
}
func (m *MsgWirePayForData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWirePayForData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWirePayForData proto.InternalMessageInfo

func (m *MsgWirePayForData) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgWirePayForData) GetMessageNamespaceId() []byte {
	if m != nil {
		return m.MessageNamespaceId
	}
	return nil
}

func (m *MsgWirePayForData) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

func (m *MsgWirePayForData) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *MsgWirePayForData) GetMessageShareCommitment() []ShareCommitAndSignature {
	if m != nil {
		return m.MessageShareCommitment
	}
	return nil
}

// MsgWirePayForDataResponse describes the response returned after the
// submission of a WirePayForData
type MsgWirePayForDataResponse struct {
}

func (m *MsgWirePayForDataResponse) Reset()         { *m = MsgWirePayForDataResponse{} }
func (m *MsgWirePayForDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWirePayForDataResponse) ProtoMessage()    {}
func (*MsgWirePayForDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{1}
}
func (m *MsgWirePayForDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWirePayForDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWirePayForDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWirePayForDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWirePayForDataResponse.Merge(m, src)
}
func (m *MsgWirePayForDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWirePayForDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWirePayForDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWirePayForDataResponse proto.InternalMessageInfo

// ShareCommitAndSignature defines the
type ShareCommitAndSignature struct {
	SquareSize      uint64 `protobuf:"varint,1,opt,name=square_size,json=squareSize,proto3" json:"square_size,omitempty"`
	ShareCommitment []byte `protobuf:"bytes,2,opt,name=share_commitment,json=shareCommitment,proto3" json:"share_commitment,omitempty"`
	Signature       []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ShareCommitAndSignature) Reset()         { *m = ShareCommitAndSignature{} }
func (m *ShareCommitAndSignature) String() string { return proto.CompactTextString(m) }
func (*ShareCommitAndSignature) ProtoMessage()    {}
func (*ShareCommitAndSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{2}
}
func (m *ShareCommitAndSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareCommitAndSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareCommitAndSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareCommitAndSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareCommitAndSignature.Merge(m, src)
}
func (m *ShareCommitAndSignature) XXX_Size() int {
	return m.Size()
}
func (m *ShareCommitAndSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareCommitAndSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ShareCommitAndSignature proto.InternalMessageInfo

func (m *ShareCommitAndSignature) GetSquareSize() uint64 {
	if m != nil {
		return m.SquareSize
	}
	return 0
}

func (m *ShareCommitAndSignature) GetShareCommitment() []byte {
	if m != nil {
		return m.ShareCommitment
	}
	return nil
}

func (m *ShareCommitAndSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgPayForData is what gets signed by users when creating
// ShareCommitSignatures.
//  Multiple versions are signed and included, each version creates a commitment
//  for a
// specific square size.
type MsgPayForData struct {
	Signer                 string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	MessageNamespaceId     []byte `protobuf:"bytes,2,opt,name=message_namespace_id,json=messageNamespaceId,proto3" json:"message_namespace_id,omitempty"`
	MessageSize            uint64 `protobuf:"varint,3,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
	MessageShareCommitment []byte `protobuf:"bytes,4,opt,name=message_share_commitment,json=messageShareCommitment,proto3" json:"message_share_commitment,omitempty"`
}

func (m *MsgPayForData) Reset()         { *m = MsgPayForData{} }
func (m *MsgPayForData) String() string { return proto.CompactTextString(m) }
func (*MsgPayForData) ProtoMessage()    {}
func (*MsgPayForData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{3}
}
func (m *MsgPayForData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForData.Merge(m, src)
}
func (m *MsgPayForData) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForData proto.InternalMessageInfo

func (m *MsgPayForData) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgPayForData) GetMessageNamespaceId() []byte {
	if m != nil {
		return m.MessageNamespaceId
	}
	return nil
}

func (m *MsgPayForData) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

func (m *MsgPayForData) GetMessageShareCommitment() []byte {
	if m != nil {
		return m.MessageShareCommitment
	}
	return nil
}

// MsgPayForDataResponse describes the response returned after the submission
// of a PayForData
type MsgPayForDataResponse struct {
}

func (m *MsgPayForDataResponse) Reset()         { *m = MsgPayForDataResponse{} }
func (m *MsgPayForDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayForDataResponse) ProtoMessage()    {}
func (*MsgPayForDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9897659aff976806, []int{4}
}
func (m *MsgPayForDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayForDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayForDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayForDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayForDataResponse.Merge(m, src)
}
func (m *MsgPayForDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayForDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayForDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayForDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgWirePayForData)(nil), "payment.MsgWirePayForData")
	proto.RegisterType((*MsgWirePayForDataResponse)(nil), "payment.MsgWirePayForDataResponse")
	proto.RegisterType((*ShareCommitAndSignature)(nil), "payment.ShareCommitAndSignature")
	proto.RegisterType((*MsgPayForData)(nil), "payment.MsgPayForData")
	proto.RegisterType((*MsgPayForDataResponse)(nil), "payment.MsgPayForDataResponse")
}

func init() { proto.RegisterFile("payment/tx.proto", fileDescriptor_9897659aff976806) }

var fileDescriptor_9897659aff976806 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0x3d, 0x6f, 0x13, 0x41,
	0x10, 0xf5, 0xc6, 0x96, 0xa3, 0x8c, 0x8d, 0x08, 0xab, 0x90, 0x1c, 0xc6, 0xba, 0x1c, 0x16, 0x85,
	0x29, 0xf0, 0xa1, 0xa4, 0xa1, 0x25, 0x20, 0x24, 0x0a, 0x23, 0x74, 0x2e, 0x90, 0x68, 0xcc, 0xc4,
	0x1e, 0x36, 0x8b, 0x72, 0xbb, 0x9b, 0xdb, 0xb5, 0x14, 0xa7, 0x84, 0x3f, 0x80, 0xc4, 0x7f, 0xe1,
	0x37, 0xa4, 0x8c, 0x44, 0x43, 0x85, 0x90, 0xcd, 0xcf, 0xa0, 0x40, 0xf7, 0x19, 0xac, 0x10, 0x5a,
	0xba, 0x9d, 0xf7, 0x76, 0xde, 0xce, 0x9b, 0xa7, 0x85, 0x4d, 0x83, 0xf3, 0x98, 0x94, 0x0b, 0xdd,
	0xe9, 0xc0, 0x24, 0xda, 0x69, 0xbe, 0x5e, 0x20, 0x9d, 0x2d, 0xa1, 0x85, 0xce, 0xb0, 0x30, 0x3d,
	0xe5, 0x74, 0xa7, 0x2b, 0xb4, 0x16, 0xc7, 0x14, 0xa2, 0x91, 0x21, 0x2a, 0xa5, 0x1d, 0x3a, 0xa9,
	0x95, 0xcd, 0xd9, 0xde, 0x2f, 0x06, 0xb7, 0x86, 0x56, 0xbc, 0x96, 0x09, 0xbd, 0xc2, 0xf9, 0x73,
	0x9d, 0x3c, 0x43, 0x87, 0x7c, 0x1b, 0x9a, 0x56, 0x0a, 0x45, 0x89, 0xc7, 0x02, 0xd6, 0xdf, 0x88,
	0x8a, 0x8a, 0x3f, 0x82, 0xad, 0x98, 0xac, 0x45, 0x41, 0x63, 0x85, 0x31, 0x59, 0x83, 0x13, 0x1a,
	0xcb, 0xa9, 0xb7, 0x16, 0xb0, 0x7e, 0x3b, 0xe2, 0x05, 0xf7, 0xb2, 0xa4, 0x5e, 0x4c, 0xf9, 0x3d,
	0x68, 0x97, 0x1d, 0x56, 0x9e, 0x91, 0x57, 0x0f, 0x58, 0xbf, 0x11, 0xb5, 0x0a, 0x6c, 0x24, 0xcf,
	0x88, 0x7b, 0xb0, 0x5e, 0x94, 0x5e, 0x23, 0xd3, 0x29, 0x4b, 0xfe, 0x16, 0xbc, 0xaa, 0xf9, 0x08,
	0x13, 0x1a, 0x4f, 0x74, 0x1c, 0x4b, 0x97, 0x9a, 0xf5, 0x9a, 0x41, 0xbd, 0xdf, 0xda, 0x0b, 0x06,
	0x85, 0xf9, 0xc1, 0x28, 0xbd, 0xf0, 0x34, 0xe3, 0x9f, 0xa8, 0xe9, 0x48, 0x0a, 0x85, 0x6e, 0x96,
	0xd0, 0x41, 0xe3, 0xfc, 0xfb, 0x6e, 0x2d, 0xda, 0x2e, 0x1f, 0xbc, 0xbc, 0x95, 0x76, 0xf5, 0xee,
	0xc2, 0x9d, 0x2b, 0xee, 0x23, 0xb2, 0x46, 0x2b, 0x4b, 0xbd, 0x8f, 0x0c, 0x76, 0xae, 0x91, 0xe5,
	0xbb, 0xd0, 0xb2, 0x27, 0xb3, 0x74, 0xa6, 0xcc, 0x16, 0xcb, 0x6c, 0x41, 0x0e, 0x65, 0xae, 0x1e,
	0xc0, 0xe6, 0x95, 0x99, 0xf3, 0x35, 0xdd, 0xb4, 0xab, 0x43, 0xf0, 0x2e, 0x6c, 0xd8, 0x52, 0x38,
	0x5b, 0x50, 0x3b, 0xba, 0x04, 0x7a, 0x5f, 0x18, 0xdc, 0x18, 0x5a, 0xf1, 0xbf, 0xd2, 0x79, 0xfc,
	0x8f, 0x0c, 0xf2, 0xb8, 0xae, 0xdb, 0xed, 0x0e, 0xdc, 0x5e, 0x99, 0xbb, 0xdc, 0xeb, 0xde, 0x09,
	0xd4, 0x87, 0x56, 0xf0, 0xf7, 0x00, 0x7f, 0x9a, 0xaa, 0x92, 0x5c, 0x69, 0xea, 0xf8, 0x7f, 0xc7,
	0xab, 0x90, 0xee, 0x7f, 0xf8, 0xfa, 0xf3, 0xf3, 0x9a, 0xcf, 0xbb, 0xe1, 0x84, 0x8e, 0xc9, 0x3a,
	0x89, 0x61, 0xf9, 0x43, 0x0c, 0xce, 0xdf, 0xe9, 0x64, 0x8a, 0x0e, 0x0f, 0x86, 0xe7, 0x0b, 0x9f,
	0x5d, 0x2c, 0x7c, 0xf6, 0x63, 0xe1, 0xb3, 0x4f, 0x4b, 0xbf, 0x76, 0xb1, 0xf4, 0x6b, 0xdf, 0x96,
	0x7e, 0xed, 0xcd, 0xbe, 0x90, 0xee, 0x68, 0x76, 0x38, 0x98, 0xe8, 0xb8, 0x52, 0xd0, 0x89, 0xa8,
	0xce, 0x0f, 0xd1, 0x98, 0xf0, 0xb4, 0xd2, 0x74, 0x73, 0x43, 0xf6, 0xb0, 0x99, 0x7d, 0x9e, 0xfd,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x24, 0x5f, 0x7f, 0x8d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// PayForData allows the user to pay for the inclusion of a message
	PayForData(ctx context.Context, in *MsgPayForData, opts ...grpc.CallOption) (*MsgPayForDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PayForData(ctx context.Context, in *MsgPayForData, opts ...grpc.CallOption) (*MsgPayForDataResponse, error) {
	out := new(MsgPayForDataResponse)
	err := c.cc.Invoke(ctx, "/payment.Msg/PayForData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// PayForData allows the user to pay for the inclusion of a message
	PayForData(context.Context, *MsgPayForData) (*MsgPayForDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PayForData(ctx context.Context, req *MsgPayForData) (*MsgPayForDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayForData not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PayForData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayForData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayForData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Msg/PayForData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayForData(ctx, req.(*MsgPayForData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayForData",
			Handler:    _Msg_PayForData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/tx.proto",
}

func (m *MsgWirePayForData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWirePayForData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWirePayForData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageShareCommitment) > 0 {
		for iNdEx := len(m.MessageShareCommitment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageShareCommitment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MessageNamespaceId) > 0 {
		i -= len(m.MessageNamespaceId)
		copy(dAtA[i:], m.MessageNamespaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageNamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWirePayForDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWirePayForDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWirePayForDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShareCommitAndSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareCommitAndSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareCommitAndSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareCommitment) > 0 {
		i -= len(m.ShareCommitment)
		copy(dAtA[i:], m.ShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShareCommitment)))
		i--
		dAtA[i] = 0x12
	}
	if m.SquareSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SquareSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageShareCommitment) > 0 {
		i -= len(m.MessageShareCommitment)
		copy(dAtA[i:], m.MessageShareCommitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageShareCommitment)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MessageNamespaceId) > 0 {
		i -= len(m.MessageNamespaceId)
		copy(dAtA[i:], m.MessageNamespaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageNamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayForDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayForDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayForDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgWirePayForData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MessageNamespaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTx(uint64(m.MessageSize))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MessageShareCommitment) > 0 {
		for _, e := range m.MessageShareCommitment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWirePayForDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShareCommitAndSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SquareSize != 0 {
		n += 1 + sovTx(uint64(m.SquareSize))
	}
	l = len(m.ShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPayForData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MessageNamespaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTx(uint64(m.MessageSize))
	}
	l = len(m.MessageShareCommitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPayForDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgWirePayForData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWirePayForData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWirePayForData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageNamespaceId = append(m.MessageNamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageNamespaceId == nil {
				m.MessageNamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageShareCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageShareCommitment = append(m.MessageShareCommitment, ShareCommitAndSignature{})
			if err := m.MessageShareCommitment[len(m.MessageShareCommitment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWirePayForDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWirePayForDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWirePayForDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareCommitAndSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareCommitAndSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareCommitAndSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareSize", wireType)
			}
			m.SquareSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SquareSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCommitment = append(m.ShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.ShareCommitment == nil {
				m.ShareCommitment = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageNamespaceId = append(m.MessageNamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageNamespaceId == nil {
				m.MessageNamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageShareCommitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageShareCommitment = append(m.MessageShareCommitment[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageShareCommitment == nil {
				m.MessageShareCommitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayForDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayForDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayForDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
